#!/usr/bin/env bash
# real-time bitcoin fee rate monitor with alert system;
# monitors mempool for immediate fee rate changes, not just block confirmations.

set -euo pipefail

# configuration
TARGET_FEE=${1:-20}
CHECK_INTERVAL=${2:-30}  # seconds between checks
LOG_FILE="$HOME/.bitcoin-fee-monitor.log"
STATE_FILE="$HOME/.bitcoin-fee-monitor.state"
ALERT_COOLDOWN=300  # 5 minutes between alerts for same condition

# colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # no color

# logging function
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

# notification functions
send_notification() {
    local title="$1"
    local message="$2"
    local urgency="${3:-normal}"
    
    # macos notification
    if command -v terminal-notifier >/dev/null 2>&1; then
        terminal-notifier -title "$title" -message "$message" -sound default
    fi
    
    # try linux notifications
    if command -v notify-send >/dev/null 2>&1; then
        notify-send -u "$urgency" "$title" "$message"
    fi
    
    # slack webhook (optional - add your webhook url)
    # if [[ -n "${SLACK_WEBHOOK_URL:-}" ]]; then
    #     curl -X POST -H 'Content-type: application/json' \
    #         --data "{\"text\":\"$title: $message\"}" \
    #         "$SLACK_WEBHOOK_URL"
    # fi
}

# check if bitcoin-cli is available and working
check_bitcoin_connection() {
    if ! command -v bitcoin-cli >/dev/null 2>&1; then
        log "ERROR" "bitcoin-cli not found. Please install Bitcoin Core."
        exit 1
    fi
    
    if ! bitcoin-cli getblockcount >/dev/null 2>&1; then
        log "ERROR" "Cannot connect to Bitcoin node. Is bitcoind running?"
        exit 1
    fi
    
    local chain=$(bitcoin-cli getblockchaininfo | jq -r .chain)
    log "INFO" "Connected to Bitcoin $chain network"
}

# get current mempool fee estimates (more real-time than block stats)
get_mempool_fees() {
    local estimates
    estimates=$(bitcoin-cli estimatesmartfee 6 | jq -r '.feerate // empty')
    
    if [[ -n "$estimates" && "$estimates" != "null" ]]; then
        # convert from BTC/kB to sats/vB
        echo "$estimates * 100000 / 4" | bc -l | cut -d. -f1
    else
        # fallback to latest block stats
        local height=$(bitcoin-cli getblockcount)
        bitcoin-cli getblockstats "$height" | jq -r '.avgfeerate // 0'
    fi
}

# get multiple fee rate estimates for different confirmation targets
get_comprehensive_fees() {
    local fees_1block fees_3block fees_6block fees_144block
    
    # get estimates for different confirmation targets
    fees_1block=$(bitcoin-cli estimatesmartfee 1 | jq -r '.feerate // empty' | awk '{printf "%.0f", $1 * 100000 / 4}')
    fees_3block=$(bitcoin-cli estimatesmartfee 3 | jq -r '.feerate // empty' | awk '{printf "%.0f", $1 * 100000 / 4}')
    fees_6block=$(bitcoin-cli estimatesmartfee 6 | jq -r '.feerate // empty' | awk '{printf "%.0f", $1 * 100000 / 4}')
    fees_144block=$(bitcoin-cli estimatesmartfee 144 | jq -r '.feerate // empty' | awk '{printf "%.0f", $1 * 100000 / 4}')
    
    # fallback for any empty values
    [[ -z "$fees_1block" || "$fees_1block" == "0" ]] && fees_1block="N/A"
    [[ -z "$fees_3block" || "$fees_3block" == "0" ]] && fees_3block="N/A"
    [[ -z "$fees_6block" || "$fees_6block" == "0" ]] && fees_6block="N/A"
    [[ -z "$fees_144block" || "$fees_144block" == "0" ]] && fees_144block="N/A"
    
    echo "$fees_1block,$fees_3block,$fees_6block,$fees_144block"
}

# get mempool size and congestion info
get_mempool_info() {
    local mempool_info
    mempool_info=$(bitcoin-cli getmempoolinfo)
    
    local size=$(echo "$mempool_info" | jq -r .size)
    local bytes=$(echo "$mempool_info" | jq -r .bytes)
    local usage=$(echo "$mempool_info" | jq -r .usage)
    
    echo "$size,$bytes,$usage"
}

# check alert cooldown
should_alert() {
    local alert_type="$1"
    local current_time=$(date +%s)
    
    if [[ -f "$STATE_FILE" ]]; then
        local last_alert=$(grep "^$alert_type:" "$STATE_FILE" 2>/dev/null | cut -d: -f2 || echo "0")
        local time_diff=$((current_time - last_alert))
        
        if [[ $time_diff -lt $ALERT_COOLDOWN ]]; then
            return 1  # don't alert
        fi
    fi
    
    # update state file
    grep -v "^$alert_type:" "$STATE_FILE" 2>/dev/null > "${STATE_FILE}.tmp" || true
    echo "$alert_type:$current_time" >> "${STATE_FILE}.tmp"
    mv "${STATE_FILE}.tmp" "$STATE_FILE"
    
    return 0  # do alert
}

# display real-time dashboard
display_dashboard() {
    local current_fee="$1"
    local fees="$2"
    local mempool_info="$3"
    local block_height="$4"
    
    IFS=',' read -r fees_1block fees_3block fees_6block fees_144block <<< "$fees"
    IFS=',' read -r mempool_size mempool_bytes mempool_usage <<< "$mempool_info"
    
    clear
    echo -e "${BLUE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║                    Bitcoin Fee Monitor                       ║${NC}"
    echo -e "${BLUE}╠══════════════════════════════════════════════════════════════╣${NC}"
    echo -e "${BLUE}║${NC} Target Fee Rate: ${YELLOW}${TARGET_FEE}${NC} sats/vB"
    echo -e "${BLUE}║${NC} Block Height: ${YELLOW}${block_height}${NC}"
    echo -e "${BLUE}║${NC} Last Update: ${YELLOW}$(date)${NC}"
    echo -e "${BLUE}╠══════════════════════════════════════════════════════════════╣${NC}"
    echo -e "${BLUE}║                     Fee Estimates (sats/vB)                  ║${NC}"
    echo -e "${BLUE}║${NC} Next Block (1):   ${GREEN}${fees_1block}${NC}"
    echo -e "${BLUE}║${NC} ~30min (3):       ${GREEN}${fees_3block}${NC}"
    echo -e "${BLUE}║${NC} ~1hour (6):       ${GREEN}${fees_6block}${NC}"
    echo -e "${BLUE}║${NC} ~24hour (144):    ${GREEN}${fees_144block}${NC}"
    echo -e "${BLUE}╠══════════════════════════════════════════════════════════════╣${NC}"
    echo -e "${BLUE}║                     Mempool Status                           ║${NC}"
    echo -e "${BLUE}║${NC} Pending Transactions: ${YELLOW}${mempool_size}${NC}"
    echo -e "${BLUE}║${NC} Mempool Size: ${YELLOW}$(echo "$mempool_bytes" | awk '{printf "%.1f MB", $1/1024/1024}')${NC}"
    echo -e "${BLUE}║${NC} Memory Usage: ${YELLOW}$(echo "$mempool_usage" | awk '{printf "%.1f MB", $1/1024/1024}')${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════════╝${NC}"
    
    # status indicator
    if [[ "$current_fee" != "N/A" && "$current_fee" -lt "$TARGET_FEE" ]]; then
        echo -e "\n${GREEN}🎯 TARGET HIT! Current fee (${current_fee} sats/vB) is below target (${TARGET_FEE} sats/vB)${NC}"
    elif [[ "$current_fee" != "N/A" ]]; then
        echo -e "\n${RED}⏳ Waiting... Current fee (${current_fee} sats/vB) is above target (${TARGET_FEE} sats/vB)${NC}"
    fi
    
    echo -e "\n${BLUE}Press Ctrl+C to stop monitoring${NC}"
}

# main monitoring loop
monitor_fees() {
    log "INFO" "Starting Bitcoin fee monitoring (target: $TARGET_FEE sats/vB, interval: ${CHECK_INTERVAL}s)"
    
    while true; do
        local block_height=$(bitcoin-cli getblockcount)
        local comprehensive_fees=$(get_comprehensive_fees)
        local mempool_info=$(get_mempool_info)
        
        # get primary fee estimate (6-block target as good balance)
        IFS=',' read -r fees_1block fees_3block fees_6block fees_144block <<< "$comprehensive_fees"
        local current_fee="$fees_6block"
        
        # use 1-block estimate if 6-block not available
        [[ "$current_fee" == "N/A" || "$current_fee" == "0" ]] && current_fee="$fees_1block"
        
        # display dashboard
        display_dashboard "$current_fee" "$comprehensive_fees" "$mempool_info" "$block_height"
        
        # check if we should alert
        if [[ "$current_fee" != "N/A" && "$current_fee" -ne 0 ]]; then
            if [[ "$current_fee" -lt "$TARGET_FEE" ]]; then
                if should_alert "low_fee"; then
                    local message="Fee rate dropped to $current_fee sats/vB (target: $TARGET_FEE)"
                    send_notification "🎯 Bitcoin Fee Alert" "$message" "critical"
                    log "ALERT" "$message"
                fi
            fi
            
            # additional alerts for very low fees
            if [[ "$current_fee" -lt 5 ]]; then
                if should_alert "very_low_fee"; then
                    local message="Extremely low fees detected: $current_fee sats/vB!"
                    send_notification "🔥 Bitcoin Super Low Fees!" "$message" "critical"
                    log "ALERT" "$message"
                fi
            fi
        fi
        
        # log current state
        log "INFO" "Fee: $current_fee sats/vB, Mempool: $(echo "$mempool_info" | cut -d, -f1) txs"
        
        sleep "$CHECK_INTERVAL"
    done
}

# cleanup function
cleanup() {
    log "INFO" "Bitcoin fee monitoring stopped"
    exit 0
}

# signal handling
trap cleanup SIGINT SIGTERM

# usage information
usage() {
    echo "Usage: $0 [target_fee] [check_interval]"
    echo ""
    echo "Arguments:"
    echo "  target_fee     Target fee rate in sats/vB (default: 20)"
    echo "  check_interval Check interval in seconds (default: 30)"
    echo ""
    echo "Examples:"
    echo "  $0 10           # Alert when fees drop below 10 sats/vB"
    echo "  $0 5 60         # Alert when fees drop below 5 sats/vB, check every 60s"
    echo ""
    echo "Features:"
    echo "  - Real-time mempool monitoring"
    echo "  - Multiple confirmation target estimates"
    echo "  - Visual dashboard with mempool status"
    echo "  - Smart alerting with cooldown periods"
    echo "  - Comprehensive logging"
    echo ""
    echo "Requirements:"
    echo "  - Bitcoin Core with bitcoin-cli"
    echo "  - jq (brew install jq)"
    echo "  - bc (brew install bc)"
    echo "  - terminal-notifier (brew install terminal-notifier)"
}

# main execution
main() {
    if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
        usage
        exit 0
    fi
    
    # check dependencies
    local missing_deps=()
    command -v jq >/dev/null 2>&1 || missing_deps+=("jq")
    command -v bc >/dev/null 2>&1 || missing_deps+=("bc")
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log "ERROR" "Missing dependencies: ${missing_deps[*]}"
        log "INFO" "Install with: brew install ${missing_deps[*]}"
        exit 1
    fi
    
    check_bitcoin_connection
    monitor_fees
}

# run main function
main "$@"