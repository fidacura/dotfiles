#!/bin/bash
# arch linux post-install setup script

set -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}✓${NC} $1"
}

error() {
    echo -e "${RED}✗${NC} $1"
    exit 1
}

warn() {
    echo -e "${YELLOW}⚠${NC} $1"
}

# check if running on arch linux
check_arch() {
    if ! command -v pacman >/dev/null 2>&1; then
        error "This script is for Arch Linux systems only!"
    fi
    log "Arch Linux detected"
}

# update system
update_system() {
    log "Updating system packages..."
    sudo pacman -Syu --noconfirm
    success "System updated"
}

# install packages from packages.txt
install_packages() {
    log "Installing packages from packages.txt..."
    
    if [[ ! -f "$SCRIPT_DIR/packages.txt" ]]; then
        error "packages.txt not found"
    fi
    
    # extract package names (skip comments and empty lines)
    local packages=($(grep -v '^#' "$SCRIPT_DIR/packages.txt" | grep -v '^$' | tr '\n' ' '))
    
    if [[ ${#packages[@]} -eq 0 ]]; then
        warn "No packages found in packages.txt"
        return
    fi
    
    log "Installing ${#packages[@]} packages..."
    sudo pacman -S --needed --noconfirm "${packages[@]}" || {
        warn "Some packages failed to install - continuing anyway"
    }
    
    success "Package installation completed"
}

# setup dotfiles
setup_dotfiles() {
    log "Setting up dotfiles..."
    
    # alacritty config
    if [[ -f "$SCRIPT_DIR/alacritty.toml" ]]; then
        mkdir -p ~/.config/alacritty
        cp "$SCRIPT_DIR/alacritty.toml" ~/.config/alacritty/
        success "Alacritty configuration copied"
    fi
    
    # fish shell setup (if fish configs exist in parent directory)
    if [[ -d "$SCRIPT_DIR/../fish" ]]; then
        mkdir -p ~/.config/fish
        cp -r "$SCRIPT_DIR/../fish/"* ~/.config/fish/
        
        # set fish as default shell
        if ! grep -q "$(which fish)" /etc/shells 2>/dev/null; then
            echo "$(which fish)" | sudo tee -a /etc/shells
        fi
        chsh -s "$(which fish)"
        success "Fish shell configured and set as default"
    fi
    
    success "Dotfiles setup completed"
}

# basic system optimization
optimize_system() {
    log "Applying system optimizations..."
    
    # enable parallel downloads in pacman
    if ! grep -q "^ParallelDownloads" /etc/pacman.conf; then
        sudo sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 10/' /etc/pacman.conf
        success "Pacman parallel downloads enabled"
    fi
    
    # enable color in pacman
    if ! grep -q "^Color" /etc/pacman.conf; then
        sudo sed -i 's/#Color/Color/' /etc/pacman.conf
        success "Pacman color output enabled"
    fi
    
    # enable trim for ssd
    sudo systemctl enable fstrim.timer
    success "SSD trim timer enabled"
    
    success "System optimization completed"
}

# create directories
setup_directories() {
    log "Creating user directories..."
    mkdir -p ~/scripts ~/projects ~/downloads
    success "User directories created"
}

# main installation flow
main() {
    echo -e "${BLUE}"
    echo "=================================="
    echo "  Arch Linux Post-Install Setup  "
    echo "=================================="
    echo -e "${NC}"
    
    check_arch
    
    echo "This script will:"
    echo "• Update system packages"
    echo "• Install packages from packages.txt"
    echo "• Setup dotfiles configuration"
    echo "• Apply basic system optimizations"
    echo "• Create user directories"
    echo
    
    read -p "Continue? [y/N]: " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 0
    fi
    
    update_system
    install_packages
    setup_dotfiles
    optimize_system
    setup_directories
    
    echo
    success "Arch Linux setup completed!"
    echo
    echo "Next steps:"
    echo "• Run './wireguard' to configure VPN"
    echo "• Run './sys-optimize' for advanced optimizations"
    echo "• Reboot to ensure all changes take effect"
}

main "$@"